1、有两个序列 a,b，大小都为 n,序列元素的值任意整数，无序；
要求：通过交换 a,b  中的元素，使[序列 a  元素的和]与[序列 b  元素的和]之间的差最小。
例如:
var a=[100,99,98,1,2, 3]; 
var b=[1, 2, 3, 4,5,40];

我的想法：先排序，然后每次one swap，使sum的差减小。当出现重复swap时表示达到稳定状态


2、实现一个队列。
队列的应用场景为：
一个生产者线程将 int  类型的数入列，一个消费者线程将 int  类型的数出列


3、求一个矩阵中最大的二维矩阵(元素和最大).如:
1 2 0 3 4
2 3 4 5 1
1 1 5 3 0
中最大的是:
4 5
5 3
拓展问题：找出矩阵中最大的子矩阵和（矩阵为int型）



4、输出排序二叉树任意节点的后继、前驱
	如果二叉树有Parent指针
	typedef struct _node {  
	struct _node *left_child;  
	struct _node *right_child;  
	struct _node * parent;
	ctype    data;  
}node; //树节点数据结构定义

typedef node* Tree;

//查找二叉查找树中关键字最小的节点，返回指向该节点的指针
Tree tree_minimum(Tree root)
{
	Tree p = root;
	while (p->left_child != null)
		p = p->left_child;
	return p;
}
//查找二叉查找树中关键字最大的节点，返回指向该节点的指针
Tree tree_maxmum(Tree root)
{
	Tree p = root;

	while (p->right_child != null)
	{
		p = p->right_child;
	}
	return p;
}
//查找二叉查找树中节点x的后继节点，返回指向该节点的指针
//在查找过程中，如果节点x右子树不为空，那么返回右子树的最小节点即可
//如果节点x的右子树为空，那么后继节点为x的某一个祖先节点的父节点，而且该祖先节点是作为其父节点的左儿子
Tree tree_successor(Tree x)
{
	if (x->right_child != null)
		return tree_minimum(x->right_child);
	
	//x用来保存待确定的节点
	//y为x的父节点
	Tree y = x->parent;

	while (y != NULL && x == y->right_child)
	{
		x = y;
		y = y->parent;
	}
	return y;
}
//查找二叉查找树中节点x的前驱节点，返回指向该节点的指针
//在查找过程中，如果节点x左子树不为空，那么返回左子树的最大节点即可
//如果节点x的左子树为空，那么前驱节点为x的某一个祖先节点的父节点，而且该祖先节点是作为其父节点的右儿子
Tree tree_predecessor(Tree x)
{
	if (x->left_child != null)
		return tree_maxmum(x->left_child);

	Tree y = x->parent;
	while (y != NULL && x == y->left_child)
	{
		x = y;
		y = y->parent;
	}
	return y;
}




如果二叉树没有parent指针，只是普通二叉树，则还需要维护一个栈来存储祖先节点。



5、有大量的无序浮点数，取值范围从0到1000，怎样找到这些数的中位数
解：方法类似于桶排序，假设数字的总数量为N，那么根据N的大小，分配每个桶的容量，保证桶的数量不至于大到无法装入内存，并且桶的容量尽量的小。然后将数据依次放入桶中，接下来从最小的桶开始，逐个累计每个桶中数的数量，如果加到第i个桶时，数量首次超过了N/2，那么中位数一定在这个桶中，假设这个桶中浮点数的数量为k，累计的浮点数总数为m（不包括第i个桶），那么只要在这k个数中寻找第（N/2-m）大的数即可。用快排的partition方法就能在o(log k)的时间复杂度内找到。